(defgroup hippie-completing-read nil
  "Hippie expand with completing read."
  :group 'completion
  :group 'hippie-expand
  :prefix "hippie-completing-read-")

(defcustom hippie-completing-read-prompt "Hippie: "
  "Function to display and select from `hippie-expand' selections."
  :type 'function)

(defcustom hippie-completing-read-function 'completing-read
  "Function used with `hippie-expand' selections."
  :type 'function)

(defcustom hippie-completing-read-function-parameters '(nil
							nil
							he-search-string)
  "Further parameters passed to `hippie-completing-read'."
  :type 'list
  :risky t)

(defcustom hippie-completing-read-threshold 3
  "Minumum number of expansion candidated before using `completing-read'."
  :type '(integer :tag "Threshold"))

(defun hippie-completing-read-expand-completions
    (&optional hippie-expand-function)
  "Return full list of possible completions generated by `hippie-expand'."
  (let ((this-command 'hippie-completing-read-expand-completions)
	(last-command this-command)
	(buffer-modified (buffer-modified-p))
	(hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-letf (((symbol-function 'ding) #'ignore))
      (while (progn
	       (funcall hippie-expand-function nil)
	       (setq last-command 'hippie-completing-read-expand-completions)
	       (not (equal he-num -1)))))
    (set-buffer-modified-p buffer-modified)
    (delete he-search-string (reverse he-tried-table))))

(defun hippie-completing-read-expand-with (hippie-expand-function)
  "Offer `completing-read' based on `hippie-expand'."
  (let ((collection (hippie-completing-read-expand-completions
		     hippie-expand-function)))
    (if collection
	(if (> (length collection)
	       (if (numberp hippie-completing-read-threshold)
		   hippie-completing-read-threshold
		 0))
	    (let ((selection
		   (apply hippie-completing-read-function
			  hippie-completing-read-prompt
			  collection
			  (mapcar 'eval
				  hippie-completing-read-function-parameters))))
	      (when selection
		(he-substitute-string selection t)))
	  (hippie-expand nil))
      (user-error "No expansion found for %s" he-search-string))))

(defun hippie-completing-read ()
  "Offer `completing-read' based completion for word at point."
  (interactive)
  (hippie-completing-read-expand-with 'hippie-expand)
  (keymux-modal-mode -1))


