(require 'cl-lib)
(require 'hippie-exp)

(defgroup hippie-completing-read nil
  "Use Hippie Expansion from a Completing Read interface."
  :group 'hippie-expand
  :group 'completion
  :prefix "hippie-completing-read-")

(defcustom hippie-completing-read-prompt "Hippie: "
  "Function to display and select from `hippie-expand' selections.
Should be compatible with `completing-read'."
  :type 'function)

(defcustom hippie-completing-read-function 'completing-read
  "Function to use to display and select from `hippie-expand' selections.
Should be compatible with `completing-read'."
  :type 'function)

(defcustom hippie-completing-read-function-parameters '(nil
						       nil
						       he-search-string)
  "Further parameters to pass to `hippie-completing-read-function'.
By default, add `he-search-string' (the thing we're completing).
as initial input.

This variable is risky, since its values are evaluated when passed to `hippie-completing-read'."
  :type 'list
  :risky t)

(defcustom hippie-completing-read-threshold 3
  "Number of expandion candidates needed before using `completing-read'.
The more traditional \"cyling\" behavior for hippie-complete
will  be used so long as therere not more completion candidates
than in this number."
  :type '(integer :tag "Threshold"))

(defun hippie-completing-read-expand-completions
    (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
The optional HIPPIE-EXPAND-FUNCTION argument can be generated
with `make-hippie-expand-function'."
  (let ((this-command 'hippie-completing-read-expand-completions)
	(last-command last-command)
	(buffer-modified (buffer-modified-p))
	(hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-letf (((symbol-function 'ding) #'ignore))
      (while (progn
	       (funcall hippie-expand-function nil)
	       (setq last-command 'hippie-completing-read-expand-completions)
	       (not (equal he-num -1)))))
    (set-buffer-modified-p buffer-modified)
    (delete he-search-string (reverse he-tried-table))))

(defun hippie-completing-read-expand-with (hippie-expand-function)
  "Offer `completing-read' based completion using `hippie-expand'.
The supplied HIPPIE-EXPAND-FUNCTION will provide completion items."
  (let ((collection (hippie-completing-read-expand-completions
		     hippie-expand-function)))
    (if collection
	(if (> (length collection)
	       (if (numberp hippie-completing-read-threshold)
		   hippie-completing-read-threshold
		 0))
	    (let ((selection
		   (apply hippie-completing-read-function
			  hippie-completing-read-prompt
			  collection
			  (mapcar 'eval
				  hippie-completing-read-function-parameters))))
	      (when selection
		(he-substitute-string selection t)))
	  (hippie-expand nil))
	  (user-error "No expansion found for %s" he-search-string))))

(defun hippie-completing-read ()
  "Offer `completing-read' based completion for word at point."
  (interactive)
  (hippie-completing-read-expand-with 'hippie-expand)
  (funcall (kw-on 'kw-insert)))
	
